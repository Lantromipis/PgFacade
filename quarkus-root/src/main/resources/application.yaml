pg-facade:
  shutdown:
    await-clients: false
    wait-for-clients-duration: PT30S #format like in java.time.Duration.parse(CharSequence text) https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-
  proxy:
    port: 5433
    max-connections: 500
    connection-pool:
      enabled: true
      await-connection-when-pool-empty: true
      await-connection-when-pool-empty-timeout: PT3S
      clean-real-used-connection-timeout: PT1S
      acquire-real-connection-timeout: PT1S
      real-connection-auth-timeout: PT1S
      pool-cleanup-interval: PT15S
      redundant-connections-lifetime: PT5M
      connection-max-age: PT60M
    inactive-clients:
      disconnect: true
      inactive-connection-timeout: PT3M #format like in java.time.Duration.parse(CharSequence text) https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-
      check-interval: PT15S #format like in java.time.Duration.parse(CharSequence text) https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-
  orchestration:
    adapter: docker
    postgres-cluster-restore:
      auto-restore-if-no-instances-on-startup: true
      allow-creating-new-empty-primary-if-restore-on-startup-failed: false
      auto-restore-lost-cluster: true
      remove-failed-to-restore-instance: false
    common:
      postgres-startup-check:
        start-period: 2000 #millisecinds
        interval: 100 #millisecinds
        retries: 100
      postgres-dead-check:
        interval: PT1S #format like in java.time.Duration.parse(CharSequence text) https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-
        retries: 3
      standby:
        count: 1
        count-check-interval: PT10S
    no-adapter:
      primary-host: localhost
      primary-port: 5432
    docker:
      docker-host: unix:///var/run/pgfacade/docker.sock
      helper-object-name: "pg-facade-temp"
      pg-facade:
        local-files-directory: "/var/run/pgfacade"
      postgres:
        image-tag: "postgres:latest"
        image-pg-data: "/var/lib/postgresql/data"
        network-name: pg-facade-postgres-network
        container-name: pg-facade-managed-postgres
        volume-name: pg-facade-postgres-volume
        healthcheck:
          start-period: 3000 #millisecinds
          interval: 5000 #millisecinds
          timeout: 100 #millisecinds
          retries: 10
          cmd-shell-command: pg_isready -U ${pg-facade.postgres.users.pg-facade.username}
  archiving:
    enabled: true
    adapter: s3
    basebackup:
      create-interval: PT60M
      list-backups-interval: PT1M
      clean-up:
        remove-old: true
        keep-old-interval: PT180M
        remove-old-wal-files-when-removing: true
    wal-streaming:
      upload-wal-retries: 5
      retry-upload-wal-files-interval: PT1M
      fault-tolerance:
        streaming-active-check-interval: PT3S
        max-unsuccessful-retries-before-force-restart: 5 # rarely pg_receivewal stuck after switchover, because new primary did not receive last WAL, but pg_receivewal did. Because of that PgFacade clears WAL streaming directory and restarts WAL streaming. All files (even not saved) are removed! Recommended to use with move-wal-after-completion = true
        create-new-backup-in-case-of-force-retry: true
    s3:
      protocol: http
      endpoint: http://minio:9000
      access-key: XyWoumXpa0e5Pv8H
      secret-key: wQxh5RfnLO0MN0nDv390nfo6piLvhStM
      region: eu-central-1
      multipart-upload-part-size-mb: 5
      backups-bucket: pgfacade
      wal-bucket: pgfacade
  postgres:
    default-settings:
      max-wal-keep-count: 16  # 'wal_keep_segments' for Postgres < 13 and 'wal_keep_size' for > 13 (count * 16)
    users:
      superuser: #used only when creating new database to create other users
        username: postgres
        password: postgres
        database: postgres
      pg-facade:
        username: pgfacade
        password: pgfacade
        database: pgfacade
      replication:
        username: replicant
        password: replicant
        database: postgres
quarkus:
  http:
    port: 8080
  log:
    level: INFO
    console:
      format: "[%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}] [%-5p] [%-64.64c{3.}] [%-24.24M] - %s%e%n"
    category:
      "com.lantromipis.proxy":
        level: INFO
      "com.lantromipis.proxy.initializer":
        level: INFO
      "com.lantromipis.connectionpool" :
        level: INFO
      "org.apache.hc" :
        level: ERROR
  banner:
    enabled: true
    path: banner
  application:
    name: PgFacade

"%dev":
  pg-facade:
    orchestration:
      postgres-cluster-restore:
        allow-creating-new-empty-primary-if-restore-on-startup-failed: true
  quarkus:
    log:
      category:
        "com.lantromipis.proxy.initializer":
          min-level: TRACE
          level: DEBUG
        "com.lantromipis.proxy":
          level: DEBUG
        "com.lantromipis.connectionpool":
          level: DEBUG
        "org.apache.hc":
          level: ERROR
    devservices:
      enabled: false
    test:
      continuous-testing: disabled
